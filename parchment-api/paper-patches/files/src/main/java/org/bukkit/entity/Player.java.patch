--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -63,7 +_,17 @@
  * Represents a player, connected or not
  */
 @NullMarked
-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient { // Paper
+public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified, net.kyori.adventure.bossbar.BossBarViewer, com.destroystokyo.paper.network.NetworkClient, gg.projecteden.parchment.HasPlayer { // Paper // Parchment
+
+    // Parchment start
+    /**
+     * Returns this player object.
+     *
+     * @return this player
+     */
+    @Override
+    Player getPlayer();
+    // Parchment end
 
     // Paper start
     @Override
@@ -2073,6 +_,16 @@
      */
     public boolean canSee(Player player);
 
+    // Parchment start
+    /**
+     * Gets a view of the hidden entity UUIDs.
+     *
+     * @param plugin Plugin that has hidden entities
+     * @return a view of hidden entity UUIDs
+     */
+    public java.util.Set<java.util.UUID> getHiddenEntities(Plugin plugin);
+    // Parchment end
+
     /**
      * Visually hides an entity from this player.
      *
@@ -3932,4 +_,44 @@
      */
     @ApiStatus.Experimental
     PlayerGameConnection getConnection();
+
+    /**
+     * Checks if the player will spawn phantoms at night
+     * Uses time since last rest statistic
+     *
+     * {@link #getTimeSinceLastRest()}
+     *
+     * @return if the player will spawn phantoms at night
+     */
+    boolean isInsomniac();
+
+    /**
+     * Sets if the player bypasses phantom spawning if insomniac
+     *
+     * @param val
+     */
+    void setBypassInsomnia(boolean val);
+
+    /**
+     * Does the player bypass phantom spawning if insomniac
+     *
+     * @return if the player bypasses phantom spawning
+     */
+    boolean doesBypassInsomnia();
+
+    /**
+     * Set the time since last rest stat for the player
+     * This modifies the phantom spawning timer
+     *
+     * @param ticks how long since last rest, greater than or equal to 1
+     */
+    void setTimeSinceLastRest(int ticks);
+
+    /**
+     * Gets the time since the player last slept
+     *
+     * @return ticks since the player last slept
+     */
+    int getTimeSinceLastRest();
+
 }
