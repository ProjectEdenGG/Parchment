--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -10,6 +_,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.BiConsumer;
@@ -17,14 +_,20 @@
 import java.util.regex.Pattern;
 import java.util.stream.StreamSupport;
 import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.bossbar.BossBar.Color;
+import net.kyori.adventure.bossbar.BossBar.Flag;
+import net.kyori.adventure.bossbar.BossBar.Overlay;
 import net.kyori.adventure.inventory.Book;
 import net.kyori.adventure.key.Key;
 import net.kyori.adventure.nbt.api.BinaryTagHolder;
 import net.kyori.adventure.sound.Sound;
+import net.kyori.adventure.sound.Sound.Source;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TranslatableComponent;
 import net.kyori.adventure.text.TranslationArgument;
 import net.kyori.adventure.text.event.DataComponentValue;
+import net.kyori.adventure.text.event.DataComponentValue.Removed;
+import net.kyori.adventure.text.event.DataComponentValue.TagSerializable;
 import net.kyori.adventure.text.event.DataComponentValueConverterRegistry;
 import net.kyori.adventure.text.flattener.ComponentFlattener;
 import net.kyori.adventure.text.format.Style;
@@ -39,16 +_,22 @@
 import net.minecraft.ChatFormatting;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.Holder;
+import net.minecraft.core.Holder.Reference;
+import net.minecraft.core.Registry;
 import net.minecraft.core.component.DataComponentPatch;
+import net.minecraft.core.component.DataComponentPatch.Builder;
 import net.minecraft.core.component.DataComponentType;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.locale.Language;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
+import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.Style.Serializer;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
@@ -59,8 +_,11 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.BossEvent;
+import net.minecraft.world.BossEvent.BossBarColor;
+import net.minecraft.world.BossEvent.BossBarOverlay;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.item.component.WrittenBookContent;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftRegistry;
@@ -156,7 +_,7 @@
     }
 
     public static <T> ResourceKey<T> asVanilla(
-        final ResourceKey<? extends net.minecraft.core.Registry<T>> registry,
+        final ResourceKey<? extends Registry<T>> registry,
         final Key key
     ) {
         return ResourceKey.create(registry, asVanilla(key));
@@ -175,7 +_,7 @@
 
     public static Holder<SoundEvent> resolveSound(final Key key) {
         ResourceLocation id = asVanilla(key);
-        Optional<Holder.Reference<SoundEvent>> vanilla = BuiltInRegistries.SOUND_EVENT.get(id);
+        Optional<Reference<SoundEvent>> vanilla = BuiltInRegistries.SOUND_EVENT.get(id);
         if (vanilla.isPresent()) {
             return vanilla.get();
         }
@@ -215,7 +_,7 @@
     }
 
     public static net.minecraft.network.chat.@NotNull Component asVanillaNullToEmpty(final @Nullable Component component) {
-        if (component == null) return net.minecraft.network.chat.CommonComponents.EMPTY;
+        if (component == null) return CommonComponents.EMPTY;
         return asVanilla(component);
     }
 
@@ -290,51 +_,51 @@
 
     // BossBar
 
-    public static BossEvent.BossBarColor asVanilla(final BossBar.Color color) {
-        return switch (color) {
-            case PINK -> BossEvent.BossBarColor.PINK;
-            case BLUE -> BossEvent.BossBarColor.BLUE;
-            case RED -> BossEvent.BossBarColor.RED;
-            case GREEN -> BossEvent.BossBarColor.GREEN;
-            case YELLOW -> BossEvent.BossBarColor.YELLOW;
-            case PURPLE -> BossEvent.BossBarColor.PURPLE;
-            case WHITE -> BossEvent.BossBarColor.WHITE;
-        };
-    }
-
-    public static BossBar.Color asAdventure(final BossEvent.BossBarColor color) {
-        return switch (color) {
-            case PINK -> BossBar.Color.PINK;
-            case BLUE -> BossBar.Color.BLUE;
-            case RED -> BossBar.Color.RED;
-            case GREEN -> BossBar.Color.GREEN;
-            case YELLOW -> BossBar.Color.YELLOW;
-            case PURPLE -> BossBar.Color.PURPLE;
-            case WHITE -> BossBar.Color.WHITE;
-        };
-    }
-
-    public static BossEvent.BossBarOverlay asVanilla(final BossBar.Overlay overlay) {
-        return switch (overlay) {
-            case PROGRESS -> BossEvent.BossBarOverlay.PROGRESS;
-            case NOTCHED_6 -> BossEvent.BossBarOverlay.NOTCHED_6;
-            case NOTCHED_10 -> BossEvent.BossBarOverlay.NOTCHED_10;
-            case NOTCHED_12 -> BossEvent.BossBarOverlay.NOTCHED_12;
-            case NOTCHED_20 -> BossEvent.BossBarOverlay.NOTCHED_20;
-        };
-    }
-
-    public static BossBar.Overlay asAdventure(final BossEvent.BossBarOverlay overlay) {
-        return switch (overlay) {
-            case PROGRESS -> BossBar.Overlay.PROGRESS;
-            case NOTCHED_6 -> BossBar.Overlay.NOTCHED_6;
-            case NOTCHED_10 -> BossBar.Overlay.NOTCHED_10;
-            case NOTCHED_12 -> BossBar.Overlay.NOTCHED_12;
-            case NOTCHED_20 -> BossBar.Overlay.NOTCHED_20;
-        };
-    }
-
-    public static void setFlag(final BossBar bar, final BossBar.Flag flag, final boolean value) {
+    public static BossBarColor asVanilla(final Color color) {
+        return switch (color) {
+            case PINK -> BossBarColor.PINK;
+            case BLUE -> BossBarColor.BLUE;
+            case RED -> BossBarColor.RED;
+            case GREEN -> BossBarColor.GREEN;
+            case YELLOW -> BossBarColor.YELLOW;
+            case PURPLE -> BossBarColor.PURPLE;
+            case WHITE -> BossBarColor.WHITE;
+        };
+    }
+
+    public static Color asAdventure(final BossBarColor color) {
+        return switch (color) {
+            case PINK -> Color.PINK;
+            case BLUE -> Color.BLUE;
+            case RED -> Color.RED;
+            case GREEN -> Color.GREEN;
+            case YELLOW -> Color.YELLOW;
+            case PURPLE -> Color.PURPLE;
+            case WHITE -> Color.WHITE;
+        };
+    }
+
+    public static BossBarOverlay asVanilla(final Overlay overlay) {
+        return switch (overlay) {
+            case PROGRESS -> BossBarOverlay.PROGRESS;
+            case NOTCHED_6 -> BossBarOverlay.NOTCHED_6;
+            case NOTCHED_10 -> BossBarOverlay.NOTCHED_10;
+            case NOTCHED_12 -> BossBarOverlay.NOTCHED_12;
+            case NOTCHED_20 -> BossBarOverlay.NOTCHED_20;
+        };
+    }
+
+    public static Overlay asAdventure(final BossBarOverlay overlay) {
+        return switch (overlay) {
+            case PROGRESS -> Overlay.PROGRESS;
+            case NOTCHED_6 -> Overlay.NOTCHED_6;
+            case NOTCHED_10 -> Overlay.NOTCHED_10;
+            case NOTCHED_12 -> Overlay.NOTCHED_12;
+            case NOTCHED_20 -> Overlay.NOTCHED_20;
+        };
+    }
+
+    public static void setFlag(final BossBar bar, final Flag flag, final boolean value) {
         if (value) {
             bar.addFlag(flag);
         } else {
@@ -345,7 +_,7 @@
     // Book
 
     public static ItemStack asItemStack(final Book book, final Locale locale) {
-        final ItemStack item = new ItemStack(net.minecraft.world.item.Items.WRITTEN_BOOK, 1);
+        final ItemStack item = new ItemStack(Items.WRITTEN_BOOK, 1);
         item.set(DataComponents.WRITTEN_BOOK_CONTENT, new WrittenBookContent(
             Filterable.passThrough(validateField(asPlain(book.title(), locale), WrittenBookContent.TITLE_MAX_LENGTH, "title")),
             asPlain(book.author(), locale),
@@ -366,7 +_,7 @@
 
     // Sounds
 
-    public static SoundSource asVanilla(final Sound.Source source) {
+    public static SoundSource asVanilla(final Source source) {
         return switch (source) {
             case MASTER -> SoundSource.MASTER;
             case MUSIC -> SoundSource.MUSIC;
@@ -382,7 +_,7 @@
         };
     }
 
-    public static @Nullable SoundSource asVanillaNullable(final Sound.@Nullable Source source) {
+    public static @Nullable SoundSource asVanillaNullable(final @Nullable Source source) {
         if (source == null) {
             return null;
         }
@@ -425,7 +_,7 @@
             return Collections.emptyMap();
         }
         final Map<Key, DataComponentValue> map = new HashMap<>();
-        for (final Map.Entry<DataComponentType<?>, Optional<?>> entry : patch.entrySet()) {
+        for (final Entry<DataComponentType<?>, Optional<?>> entry : patch.entrySet()) {
             if (entry.getKey().isTransient()) continue;
             @Subst("key:value") final String typeKey = requireNonNull(BuiltInRegistries.DATA_COMPONENT_TYPE.getKey(entry.getKey())).toString();
             if (entry.getValue().isEmpty()) {
@@ -442,10 +_,10 @@
         if (map.isEmpty()) {
             return DataComponentPatch.EMPTY;
         }
-        final DataComponentPatch.Builder builder = DataComponentPatch.builder();
+        final Builder builder = DataComponentPatch.builder();
         map.forEach((key, dataComponentValue) -> {
             final DataComponentType<?> type = requireNonNull(BuiltInRegistries.DATA_COMPONENT_TYPE.getValue(asVanilla(key)));
-            if (dataComponentValue instanceof DataComponentValue.Removed) {
+            if (dataComponentValue instanceof Removed) {
                 builder.remove(type);
                 return;
             }
@@ -455,7 +_,7 @@
         return builder.build();
     }
 
-    public record DataComponentValueImpl<T>(com.mojang.serialization.Codec<T> codec, T value) implements DataComponentValue.TagSerializable {
+    public record DataComponentValueImpl<T>(com.mojang.serialization.Codec<T> codec, T value) implements TagSerializable {
 
         @Override
         public @NotNull BinaryTagHolder asBinaryTag() {
@@ -491,16 +_,49 @@
         final Object encoded = AdventureCodecs.STYLE_MAP_CODEC.codec()
             .encodeStart(ops, style).getOrThrow(IllegalStateException::new);
 
-        return net.minecraft.network.chat.Style.Serializer.CODEC
+        return Serializer.CODEC
             .parse(ops, encoded).getOrThrow(IllegalStateException::new);
     }
 
     public static Style asAdventure(final net.minecraft.network.chat.Style style) {
         final RegistryOps<Object> ops = CraftRegistry.getMinecraftRegistry().createSerializationContext(JavaOps.INSTANCE);
-        final Object encoded = net.minecraft.network.chat.Style.Serializer.CODEC
+        final Object encoded = Serializer.CODEC
             .encodeStart(ops, style).getOrThrow(IllegalStateException::new);
 
         return AdventureCodecs.STYLE_MAP_CODEC.codec()
             .parse(ops, encoded).getOrThrow(IllegalStateException::new);
     }
+    
+    // Parchment start
+    public static Source asAdventure(final SoundSource source) {
+        return switch (source) {
+            case MASTER -> Source.MASTER;
+            case MUSIC -> Source.MUSIC;
+            case RECORDS -> Source.RECORD;
+            case WEATHER -> Source.WEATHER;
+            case BLOCKS -> Source.BLOCK;
+            case HOSTILE -> Source.HOSTILE;
+            case NEUTRAL -> Source.NEUTRAL;
+            case PLAYERS -> Source.PLAYER;
+            case AMBIENT -> Source.AMBIENT;
+            case VOICE -> Source.VOICE;
+            case UI -> Source.UI;
+        };
+    }
+    
+    public static Optional<SoundEvent> asVanillaSound(final Key key) {
+        return BuiltInRegistries.SOUND_EVENT.getOptional(asVanilla(key));
+    }
+    
+    public static Optional<Reference<SoundEvent>> asSoundHolder(final ResourceKey<SoundEvent> key) {
+        return BuiltInRegistries.SOUND_EVENT.get(key);
+    }
+    
+    public static Optional<Reference<SoundEvent>> asVanillaSoundHolder(final Key key) {
+        return asSoundHolder(ResourceKey.create(Registries.SOUND_EVENT, asVanilla(key)));
+    }
+    
+    // Parchment end
+    
+    
 }
