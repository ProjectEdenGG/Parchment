--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -150,8 +_,14 @@
     }
 
     public void shoot(double x, double y, double z, float velocity, float inaccuracy) {
+        shoot(x, y, z, velocity, inaccuracy, true);
+    }
+
+    public void shoot(double x, double y, double z, float velocity, float inaccuracy, boolean relative) {
         Vec3 movementToShoot = this.getMovementToShoot(x, y, z, velocity, inaccuracy);
-        this.setDeltaMovement(movementToShoot);
+        if (relative) { // Parchment
+            this.setDeltaMovement(movementToShoot);
+        } // Parchment
         this.hasImpulse = true;
         double d = movementToShoot.horizontalDistance();
         this.setYRot((float)(Mth.atan2(movementToShoot.x, movementToShoot.z) * 180.0F / (float)Math.PI));
@@ -161,6 +_,10 @@
     }
 
     public void shootFromRotation(Entity shooter, float x, float y, float z, float velocity, float inaccuracy) {
+        this.shootFromRotation(shooter, x, y, z, velocity, inaccuracy, true);
+    }
+
+    public void shootFromRotation(Entity shooter, float x, float y, float z, float velocity, float inaccuracy, boolean relative) {
         float f = -Mth.sin(y * (float) (Math.PI / 180.0)) * Mth.cos(x * (float) (Math.PI / 180.0));
         float f1 = -Mth.sin((x + z) * (float) (Math.PI / 180.0));
         float f2 = Mth.cos(y * (float) (Math.PI / 180.0)) * Mth.cos(x * (float) (Math.PI / 180.0));
@@ -170,7 +_,7 @@
         if (Double.isNaN(knownMovement.x) || Double.isNaN(knownMovement.y) || Double.isNaN(knownMovement.z)) {
             knownMovement = new Vec3(0, 0, 0);
         }
-        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity) {
+        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity && relative) {
         this.setDeltaMovement(this.getDeltaMovement().add(knownMovement.x, shooter.onGround() ? 0.0 : knownMovement.y, knownMovement.z));
         }
         // Paper end - allow disabling relative velocity
@@ -217,7 +_,11 @@
         float velocity,
         float inaccuracy
     ) {
-        return spawnProjectile(factory.create(level, owner, spawnedFrom), level, spawnedFrom, projectile -> projectile.shoot(x, y, z, velocity, inaccuracy));
+        return Projectile.spawnProjectileUsingShoot(factory, level, spawnedFrom, owner, x, y, z, velocity, inaccuracy, true);
+    }
+
+    public static <T extends Projectile> T spawnProjectileUsingShoot(Projectile.ProjectileFactory<T> factory, ServerLevel level, ItemStack spawnedFrom, LivingEntity owner, double x, double y, double z, float velocity, float inaccuracy, boolean relative) {
+        return spawnProjectile(factory.create(level, owner, spawnedFrom), level, spawnedFrom, projectile -> projectile.shoot(x, y, z, velocity, inaccuracy, relative));
     }
 
     public static <T extends Projectile> T spawnProjectileUsingShoot(
@@ -227,9 +_,21 @@
         return spawnProjectileUsingShootDelayed(projectile, level, spawnedFrom, x, y, z, velocity, inaccuracy).spawn();
     }
 
+    public static <T extends Projectile> T spawnProjectileUsingShoot(T projectile, ServerLevel world, ItemStack projectileStack, double velocityX, double velocityY, double velocityZ, float power, float divergence, boolean relative) {
+        // Paper start - fixes and addition to spawn reason API
+        return spawnProjectileUsingShootDelayed(projectile, world, projectileStack, velocityX, velocityY, velocityZ, power, divergence, relative).spawn();
+    }
+
     public static <T extends Projectile> Delayed<T> spawnProjectileUsingShootDelayed(T projectile, ServerLevel level, ItemStack spawnedFrom, double x, double y, double z, float velocity, float inaccuracy) {
         return spawnProjectileDelayed(projectile, level, spawnedFrom, projectile1 -> projectile.shoot(x, y, z, velocity, inaccuracy));
         // Paper end - fixes and addition to spawn reason API
+    }
+
+    public static <T extends Projectile> Delayed<T> spawnProjectileUsingShootDelayed(T projectile, ServerLevel world, ItemStack projectileStack, double velocityX, double velocityY, double velocityZ, float power, float divergence, boolean relative) {
+        return Projectile.spawnProjectileDelayed(projectile, world, projectileStack, (iprojectile) -> {
+            // Paper end - fixes and addition to spawn reason API
+            projectile.shoot(velocityX, velocityY, velocityZ, power, divergence, relative);
+        });
     }
 
     public static <T extends Projectile> T spawnProjectile(T projectile, ServerLevel level, ItemStack spawnedFrom) {
