From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lexikiq <noellekiq@gmail.com>
Date: Sun, 20 Jun 2021 23:15:44 -0400
Subject: [PATCH] Expose EntityType Ordinals


diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index ac0f0a4da4282c13f6e1f37710cb615d66b8ef2c..aa98cea349a3929cbb29fa01962ae98d9136cda7 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -154,6 +154,8 @@ import org.slf4j.Logger;
 
 public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
 
+    private static int ordinal = 0; // Parchment
+    private static final java.util.Map<EntityType, Integer> ordinals = new java.util.HashMap<>(); // Parchment
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ENTITY_TAG = "EntityTag";
     private final Holder.Reference<EntityType<?>> builtInRegistryHolder;
@@ -294,9 +296,31 @@ public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
     private final EntityDimensions dimensions;
 
     private static <T extends Entity> EntityType<T> register(String id, EntityType.Builder type) { // CraftBukkit - decompile error
-        return (EntityType) Registry.register(Registry.ENTITY_TYPE, id, (EntityType<T>) type.build(id)); // CraftBukkit - decompile error
+        // Parchment start
+        EntityType build = type.build(id);
+        ordinals.put(build, ordinal);
+        ordinal += 1;
+        return (EntityType) Registry.register(Registry.ENTITY_TYPE, id, (EntityType<T>) build);
     }
 
+    public int ordinal() {
+        return ordinals.get(this); // CraftBukkit - decompile error
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        EntityType<?> that = (EntityType<?>) o;
+        return id.equals(that.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return java.util.Objects.hash(id);
+    }
+    // Parchment end
+
     public static ResourceLocation getKey(EntityType<?> type) {
         return Registry.ENTITY_TYPE.getKey(type);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index becf74479b423e6c750264469a1858b2530f516c..c00a36260319b956274b1cae7740777eea2a5791 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -666,6 +666,18 @@ public final class CraftMagicNumbers implements UnsafeValues {
         final net.minecraft.world.item.context.BlockPlaceContext ctx = context;
         return future.completeAsync(() -> blockItem.canPlace(ctx, blockState), net.minecraft.server.MCUtil.MAIN_EXECUTOR);
     }
+
+    @Override
+    public int entityID(org.bukkit.entity.EntityType type) {
+        String name = type.getName();
+        if (name == null) {
+            throw new IllegalArgumentException("Entity name is undefined");
+        }
+        return net.minecraft.world.entity.EntityType.byString(name)
+            .orElseThrow(() -> new IllegalArgumentException("Could not find corresponding NMS entity"))
+            .ordinal();
+    }
+
     // Parchment end
 
     /**
