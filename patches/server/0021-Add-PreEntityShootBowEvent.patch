From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Blast-MC <cjblanton2@gmail.com>
Date: Thu, 16 Mar 2023 23:11:05 -0400
Subject: [PATCH] Add PreEntityShootBowEvent


diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index 3b5cf6ffb74d11bea5eb21bd66d679734ff5000c..321499a52848101b6c36bef18a35f5367c62913c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -201,15 +201,21 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
 
     @Override
     public void performRangedAttack(LivingEntity target, float pullProgress) {
+
         ItemStack itemstack = this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW));
         ItemStack itemstack1 = this.getProjectile(itemstack);
         AbstractArrow entityarrow = this.getArrow(itemstack1, pullProgress, itemstack);
+
+        // Parchment start
+        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(this.getBukkitEntity(), this.getMainHandItem().asBukkitCopy(), itemstack1.asBukkitCopy());
+        if (!preEvent.callEvent()) return;
+        // Parchment end
         double d0 = target.getX() - this.getX();
         double d1 = target.getY(0.3333333333333333D) - entityarrow.getY();
         double d2 = target.getZ() - this.getZ();
         double d3 = Math.sqrt(d0 * d0 + d2 * d2);
 
-        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4), preEvent.isRelative()); // Parchment
         // CraftBukkit start
         org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getMainHandItem(), entityarrow.getPickupItem(), entityarrow, net.minecraft.world.InteractionHand.MAIN_HAND, 0.8F, true); // Paper
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index c858556ea457931aa14e338e20672cb50cb19f0e..b93db38d69ea6f12f4c1d2f73800753a04309772 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -179,12 +179,16 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         ItemStack itemstack = this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW));
         ItemStack itemstack1 = this.getProjectile(itemstack);
         AbstractArrow entityarrow = ProjectileUtil.getMobArrow(this, itemstack1, pullProgress, itemstack);
+
+        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(this.getBukkitEntity(), this.getMainHandItem().asBukkitCopy(), itemstack1.asBukkitCopy());
+        if (!preEvent.callEvent()) return;
+        // Parchment end
         double d0 = target.getX() - this.getX();
         double d1 = target.getY(0.3333333333333333D) - entityarrow.getY();
         double d2 = target.getZ() - this.getZ();
         double d3 = Math.sqrt(d0 * d0 + d2 * d2);
 
-        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4), preEvent.isRelative()); // Parchment
         // Paper start - EntityShootBowEvent
         org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getMainHandItem(), entityarrow.getPickupItem(), entityarrow, target.getUsedItemHand(), 0.8F, true);
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 9ca29b3d4bf8bca5f51f3644e12fcbec2cb5d35e..3c314a9db7467c1066f9e5c8857438bb01317274 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -167,8 +167,10 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     @Override
-    public void shoot(double x, double y, double z, float power, float uncertainty) {
-        super.shoot(x, y, z, power, uncertainty);
+    // Parchment start
+    public void shoot(double x, double y, double z, float speed, float divergence, boolean relative) {
+        super.shoot(x, y, z, speed, divergence, relative);
+    // Parchment end
         this.life = 0;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index de64de5d1328d3e0826c9990eb7c7eca5088cb9c..1a4678def2e1f0a48a94c73b2ea5ab3215e6ba3b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -181,9 +181,17 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     public void shoot(double x, double y, double z, float power, float uncertainty) {
-        Vec3 vec3d = this.getMovementToShoot(x, y, z, power, uncertainty);
+        // Parchment start
+        shoot(x, y, z, power, uncertainty, true);
+    }
+
+    public void shoot(double x, double y, double z, float speed, float divergence, boolean relative) {
+        // Parchment end
+        Vec3 vec3d = this.getMovementToShoot(x, y, z, speed, divergence);
 
-        this.setDeltaMovement(vec3d);
+        if (relative) { // Parchment
+            this.setDeltaMovement(vec3d);
+        } // Parchment
         this.hasImpulse = true;
         double d3 = vec3d.horizontalDistance();
 
@@ -194,6 +202,12 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     public void shootFromRotation(Entity shooter, float pitch, float yaw, float roll, float speed, float divergence) {
+        // Parchment start
+        shootFromRotation(shooter, pitch, yaw, roll, speed, divergence, true);
+    }
+
+    public void shootFromRotation(Entity shooter, float pitch, float yaw, float roll, float speed, float divergence, boolean relative) {
+        // Parchment end
         float f5 = -Mth.sin(yaw * 0.017453292F) * Mth.cos(pitch * 0.017453292F);
         float f6 = -Mth.sin((pitch + roll) * 0.017453292F);
         float f7 = Mth.cos(yaw * 0.017453292F) * Mth.cos(pitch * 0.017453292F);
@@ -204,7 +218,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         if (vec3d.lengthSqr() > 4D * 4D) {
             vec3d = vec3d.normalize().scale(2D);
         }
-        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity) {
+        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity && relative) { // Parchment
         this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z));
         }
         // Paper end - allow disabling relative velocity
diff --git a/src/main/java/net/minecraft/world/item/BowItem.java b/src/main/java/net/minecraft/world/item/BowItem.java
index 6eb5c0f23d9dc61e69ad5ad493c89602a9dcd4b5..63ba7c2ecdd80e10d611aeb08fa786a478107cb9 100644
--- a/src/main/java/net/minecraft/world/item/BowItem.java
+++ b/src/main/java/net/minecraft/world/item/BowItem.java
@@ -31,8 +31,13 @@ public class BowItem extends ProjectileWeaponItem {
                 float f = getPowerForTime(i);
                 if (!((double)f < 0.1)) {
                     List<ItemStack> list = draw(stack, itemStack, player);
-                    if (world instanceof ServerLevel serverLevel && !list.isEmpty()) {
-                        this.shoot(serverLevel, player, player.getUsedItemHand(), stack, list, f * 3.0F, 1.0F, f == 1.0F, null);
+
+                    if (!world.isClientSide() && !list.isEmpty()) {
+                        // Parchment start
+                        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(user.getBukkitEntity(), stack.asBukkitCopy(), itemStack.asBukkitCopy());
+                        if (!preEvent.callEvent()) return;
+                        // Parchment end
+                        this.shoot((ServerLevel) world, player, player.getUsedItemHand(), stack, list, f * 3.0F, 1.0F, f == 1.0F, null, preEvent.isRelative());
                     }
 
                     world.playSound(
@@ -53,9 +58,9 @@ public class BowItem extends ProjectileWeaponItem {
 
     @Override
     protected void shootProjectile(
-        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target
+        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative
     ) {
-        projectile.shootFromRotation(shooter, shooter.getXRot(), shooter.getYRot() + yaw, 0.0F, speed, divergence);
+        projectile.shootFromRotation(shooter, shooter.getXRot(), shooter.getYRot() + yaw, 0.0F, speed, divergence, relative);
     }
 
     public static float getPowerForTime(int useTicks) {
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index c39fa953accd6cf35672f452052cca42fe6f29d0..9bbdf240f7ee520e5d13155ca34f26235f4e5f5b 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -137,7 +137,7 @@ public class CrossbowItem extends ProjectileWeaponItem {
 
     @Override
     protected void shootProjectile(
-        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target
+        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative
     ) {
         Vector3f vector3f;
         if (target != null) {
@@ -198,8 +198,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
     ) {
         if (world instanceof ServerLevel serverLevel) {
             ChargedProjectiles chargedProjectiles = stack.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.EMPTY);
+            // Parchment start
+            gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(shooter.getBukkitEntity(), stack.asBukkitCopy(), chargedProjectiles.getItems().get(0).asBukkitCopy());
+            if (!preEvent.callEvent()) return;
+            // TODO: handle relative flag in CrossbowAttackMob#shootCrossbowProjectile
+            // Parchment end
+
             if (chargedProjectiles != null && !chargedProjectiles.isEmpty()) {
-                this.shoot(serverLevel, shooter, hand, stack, chargedProjectiles.getItems(), speed, divergence, shooter instanceof Player, target);
+                this.shoot(serverLevel, shooter, hand, stack, chargedProjectiles.getItems(), speed, divergence, shooter instanceof Player, target, preEvent.isRelative());
                 if (shooter instanceof ServerPlayer serverPlayer) {
                     CriteriaTriggers.SHOT_CROSSBOW.trigger(serverPlayer, stack);
                     serverPlayer.awardStat(Stats.ITEM_USED.get(stack.getItem()));
diff --git a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
index 32dd0b13a0819f597d8a93c6bc3a155781067544..a74540e3a0aa61534fd84868bf8a29d97ccb6e6b 100644
--- a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -46,9 +46,10 @@ public abstract class ProjectileWeaponItem extends Item {
 
     public abstract int getDefaultProjectileRange();
 
-    protected void shoot(ServerLevel world, LivingEntity shooter, InteractionHand hand, ItemStack stack, List<ItemStack> projectiles, float speed, float divergence, boolean critical, @Nullable LivingEntity target) {
+
+    protected void shoot(ServerLevel world, LivingEntity shooter, InteractionHand hand, ItemStack stack, List<ItemStack> projectiles, float speed, float divergence, boolean critical, @Nullable LivingEntity target, boolean relative) {
         float f2 = EnchantmentHelper.processProjectileSpread(world, stack, shooter, 0.0F);
-        float f3 = projectiles.size() == 1 ? 0.0F : 2.0F * f2 / (float) (projectiles.size() - 1);
+        float f3 = projectiles.size() == 1 ? 0.0F : 20.0F / (float) (projectiles.size() - 1);
         float f4 = (float) ((projectiles.size() - 1) % 2) * f3 / 2.0F;
         float f5 = 1.0F;
 
@@ -61,7 +62,7 @@ public abstract class ProjectileWeaponItem extends Item {
                 f5 = -f5;
                 Projectile iprojectile = this.createProjectile(world, shooter, stack, itemstack1, critical);
 
-                this.shootProjectile(shooter, iprojectile, i, speed, divergence, f6, target);
+                this.shootProjectile(shooter, iprojectile, i, speed, divergence, f6, target, relative);
                 // CraftBukkit start
                 org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(shooter, stack, itemstack1, iprojectile, hand, speed, true);
                 if (event.isCancelled()) {
@@ -91,7 +92,7 @@ public abstract class ProjectileWeaponItem extends Item {
         return 1;
     }
 
-    protected abstract void shootProjectile(LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target);
+    protected abstract void shootProjectile(LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative);
 
     protected Projectile createProjectile(Level world, LivingEntity shooter, ItemStack weaponStack, ItemStack projectileStack, boolean critical) {
         Item item = projectileStack.getItem();
