From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Blast-MC <cjblanton2@gmail.com>
Date: Thu, 16 Mar 2023 23:11:05 -0400
Subject: [PATCH] Add PreEntityShootBowEvent


diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index 32670a3cb4b54b66d655197e3fde834d2b2b6d34..ec0f692bfc19669797b9b355fe4028578be7a133 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -206,6 +206,11 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
         ItemStack itemstack = this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW));
         ItemStack itemstack1 = this.getProjectile(itemstack);
         AbstractArrow entityarrow = this.getArrow(itemstack1, pullProgress, itemstack);
+
+        // Parchment start
+        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(this.getBukkitEntity(), this.getMainHandItem().asBukkitCopy(), itemstack1.asBukkitCopy());
+        if (!preEvent.callEvent()) return;
+        // Parchment end
         double d0 = target.getX() - this.getX();
         double d1 = target.getY(0.3333333333333333D) - entityarrow.getY();
         double d2 = target.getZ() - this.getZ();
@@ -221,7 +226,7 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
             }
 
             if (event.getProjectile() == entityarrow.getBukkitEntity()) {
-                Projectile.spawnProjectileUsingShoot(entityarrow, worldserver, itemstack1, d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - worldserver.getDifficulty().getId() * 4));
+                Projectile.spawnProjectileUsingShoot(entityarrow, worldserver, itemstack1, d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - worldserver.getDifficulty().getId() * 4), preEvent.isRelative());
             }
             // CraftBukkit end
         }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index db3aac9ba711dcd18ffc35c4a745ecaec89d0166..052125cdb7ae6aef5b247ca5509e61dd21b567a2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -177,6 +177,10 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         ItemStack itemstack = this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW));
         ItemStack itemstack1 = this.getProjectile(itemstack);
         AbstractArrow entityarrow = ProjectileUtil.getMobArrow(this, itemstack1, pullProgress, itemstack);
+
+        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(this.getBukkitEntity(), this.getMainHandItem().asBukkitCopy(), itemstack1.asBukkitCopy());
+        if (!preEvent.callEvent()) return;
+        // Parchment end
         double d0 = target.getX() - this.getX();
         double d1 = target.getY(0.3333333333333333D) - entityarrow.getY();
         double d2 = target.getZ() - this.getZ();
@@ -192,7 +196,7 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
             }
 
             if (event.getProjectile() == entityarrow.getBukkitEntity()) {
-            Projectile.spawnProjectileUsingShoot(entityarrow, worldserver, itemstack1, d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - worldserver.getDifficulty().getId() * 4));
+                Projectile.spawnProjectileUsingShoot(entityarrow, worldserver, itemstack1, d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - worldserver.getDifficulty().getId() * 4), preEvent.isRelative());
             }
             // Paper end - EntityShootBowEvent
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 571f0699772eecbe02d71845da82a142321f2142..937da68b6d9aac6ad0c37de7f9db888eb29e017b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -164,8 +164,10 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     @Override
-    public void shoot(double x, double y, double z, float power, float uncertainty) {
-        super.shoot(x, y, z, power, uncertainty);
+    // Parchment start
+    public void shoot(double x, double y, double z, float speed, float divergence, boolean relative) {
+        super.shoot(x, y, z, speed, divergence, relative);
+    // Parchment end
         this.life = 0;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 6c2d4d6f3a36ab452dfd3c33f66e54f152906639..ed9ca8381bd23336bd1859f4bdc1f18d4867ee1e 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -192,9 +192,17 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     public void shoot(double x, double y, double z, float power, float uncertainty) {
-        Vec3 vec3d = this.getMovementToShoot(x, y, z, power, uncertainty);
+        // Parchment start
+        shoot(x, y, z, power, uncertainty, true);
+    }
+
+    public void shoot(double x, double y, double z, float speed, float divergence, boolean relative) {
+        // Parchment end
+        Vec3 vec3d = this.getMovementToShoot(x, y, z, speed, divergence);
 
-        this.setDeltaMovement(vec3d);
+        if (relative) { // Parchment
+            this.setDeltaMovement(vec3d);
+        } // Parchment
         this.hasImpulse = true;
         double d3 = vec3d.horizontalDistance();
 
@@ -205,6 +213,12 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     public void shootFromRotation(Entity shooter, float pitch, float yaw, float roll, float speed, float divergence) {
+        // Parchment start
+        shootFromRotation(shooter, pitch, yaw, roll, speed, divergence, true);
+    }
+
+    public void shootFromRotation(Entity shooter, float pitch, float yaw, float roll, float speed, float divergence, boolean relative) {
+        // Parchment end
         float f5 = -Mth.sin(yaw * 0.017453292F) * Mth.cos(pitch * 0.017453292F);
         float f6 = -Mth.sin((pitch + roll) * 0.017453292F);
         float f7 = Mth.cos(yaw * 0.017453292F) * Mth.cos(pitch * 0.017453292F);
@@ -212,7 +226,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         this.shoot((double) f5, (double) f6, (double) f7, speed, divergence);
         Vec3 vec3d = shooter.getKnownMovement();
         // Paper start - allow disabling relative velocity
-        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity) {
+        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity && relative) {
         this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z));
         }
         // Paper end - allow disabling relative velocity
@@ -230,8 +244,12 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     public static <T extends Projectile> T spawnProjectileUsingShoot(Projectile.ProjectileFactory<T> creator, ServerLevel world, ItemStack projectileStack, LivingEntity shooter, double velocityX, double velocityY, double velocityZ, float power, float divergence) {
+        return Projectile.spawnProjectileUsingShoot(creator, world, projectileStack, shooter, velocityX, velocityY, velocityZ, power, divergence, true);
+    }
+
+    public static <T extends Projectile> T spawnProjectileUsingShoot(Projectile.ProjectileFactory<T> creator, ServerLevel world, ItemStack projectileStack, LivingEntity shooter, double velocityX, double velocityY, double velocityZ, float power, float divergence, boolean relative) {
         return Projectile.spawnProjectile(creator.create(world, shooter, projectileStack), world, projectileStack, (iprojectile) -> {
-            iprojectile.shoot(velocityX, velocityY, velocityZ, power, divergence);
+            iprojectile.shoot(velocityX, velocityY, velocityZ, power, divergence, relative);
         });
     }
 
@@ -239,12 +257,22 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     // Paper start - fixes and addition to spawn reason API
         return spawnProjectileUsingShootDelayed(projectile, world, projectileStack, velocityX, velocityY, velocityZ, power, divergence).spawn();
     }
+    public static <T extends Projectile> T spawnProjectileUsingShoot(T projectile, ServerLevel world, ItemStack projectileStack, double velocityX, double velocityY, double velocityZ, float power, float divergence, boolean relative) {
+        // Paper start - fixes and addition to spawn reason API
+        return spawnProjectileUsingShootDelayed(projectile, world, projectileStack, velocityX, velocityY, velocityZ, power, divergence, relative).spawn();
+    }
     public static <T extends Projectile> Delayed<T> spawnProjectileUsingShootDelayed(T projectile, ServerLevel world, ItemStack projectileStack, double velocityX, double velocityY, double velocityZ, float power, float divergence) {
         return Projectile.spawnProjectileDelayed(projectile, world, projectileStack, (iprojectile) -> {
     // Paper end - fixes and addition to spawn reason API
             projectile.shoot(velocityX, velocityY, velocityZ, power, divergence);
         });
     }
+    public static <T extends Projectile> Delayed<T> spawnProjectileUsingShootDelayed(T projectile, ServerLevel world, ItemStack projectileStack, double velocityX, double velocityY, double velocityZ, float power, float divergence, boolean relative) {
+        return Projectile.spawnProjectileDelayed(projectile, world, projectileStack, (iprojectile) -> {
+            // Paper end - fixes and addition to spawn reason API
+            projectile.shoot(velocityX, velocityY, velocityZ, power, divergence, relative);
+        });
+    }
 
     public static <T extends Projectile> T spawnProjectile(T projectile, ServerLevel world, ItemStack projectileStack) {
         return Projectile.spawnProjectile(projectile, world, projectileStack, (iprojectile) -> {
diff --git a/src/main/java/net/minecraft/world/item/BowItem.java b/src/main/java/net/minecraft/world/item/BowItem.java
index bb593209c95c9cf1f9c5d52d52fab4a33ddbabcf..768964dbc785cb78d5ef517cf88f9f8b1f6af629 100644
--- a/src/main/java/net/minecraft/world/item/BowItem.java
+++ b/src/main/java/net/minecraft/world/item/BowItem.java
@@ -37,8 +37,13 @@ public class BowItem extends ProjectileWeaponItem {
                     return false;
                 } else {
                     List<ItemStack> list = draw(stack, itemStack, player);
-                    if (world instanceof ServerLevel serverLevel && !list.isEmpty()) {
-                        this.shoot(serverLevel, player, player.getUsedItemHand(), stack, list, f * 3.0F, 1.0F, f == 1.0F, null);
+
+                    if (!world.isClientSide() && !list.isEmpty()) {
+                        // Parchment start
+                        gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(user.getBukkitEntity(), stack.asBukkitCopy(), itemStack.asBukkitCopy());
+                        if (!preEvent.callEvent()) return false;
+                        // Parchment end
+                        this.shoot((ServerLevel) world, player, player.getUsedItemHand(), stack, list, f * 3.0F, 1.0F, f == 1.0F, null, preEvent.isRelative());
                     }
 
                     world.playSound(
@@ -60,9 +65,9 @@ public class BowItem extends ProjectileWeaponItem {
 
     @Override
     protected void shootProjectile(
-        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target
+        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative
     ) {
-        projectile.shootFromRotation(shooter, shooter.getXRot(), shooter.getYRot() + yaw, 0.0F, speed, divergence);
+        projectile.shootFromRotation(shooter, shooter.getXRot(), shooter.getYRot() + yaw, 0.0F, speed, divergence, relative);
     }
 
     public static float getPowerForTime(int useTicks) {
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index 52c40eafc77e50a6fd21b9a7a250cea501f11690..2eca32e58e41f15cd9453e936d19c26a1a4b588c 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -140,7 +140,7 @@ public class CrossbowItem extends ProjectileWeaponItem {
 
     @Override
     protected void shootProjectile(
-        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target
+        LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative
     ) {
         Vector3f vector3f;
         if (target != null) {
@@ -201,8 +201,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
     ) {
         if (world instanceof ServerLevel serverLevel) {
             ChargedProjectiles chargedProjectiles = stack.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.EMPTY);
+            // Parchment start
+            gg.projecteden.parchment.event.entity.PreEntityShootBowEvent preEvent = new gg.projecteden.parchment.event.entity.PreEntityShootBowEvent(shooter.getBukkitEntity(), stack.asBukkitCopy(), chargedProjectiles.getItems().get(0).asBukkitCopy());
+            if (!preEvent.callEvent()) return;
+            // TODO: handle relative flag in CrossbowAttackMob#shootCrossbowProjectile
+            // Parchment end
+
             if (chargedProjectiles != null && !chargedProjectiles.isEmpty()) {
-                this.shoot(serverLevel, shooter, hand, stack, chargedProjectiles.getItems(), speed, divergence, shooter instanceof Player, target);
+                this.shoot(serverLevel, shooter, hand, stack, chargedProjectiles.getItems(), speed, divergence, shooter instanceof Player, target, preEvent.isRelative());
                 if (shooter instanceof ServerPlayer serverPlayer) {
                     CriteriaTriggers.SHOT_CROSSBOW.trigger(serverPlayer, stack);
                     serverPlayer.awardStat(Stats.ITEM_USED.get(stack.getItem()));
diff --git a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
index 78ba170a83f8c026bd110eae494c52577182ed61..5ece12e41233727fbd1106d067e607810341acab 100644
--- a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -41,7 +41,7 @@ public abstract class ProjectileWeaponItem extends Item {
 
     public abstract int getDefaultProjectileRange();
 
-    protected void shoot(ServerLevel world, LivingEntity shooter, InteractionHand hand, ItemStack stack, List<ItemStack> projectiles, float speed, float divergence, boolean critical, @Nullable LivingEntity target) {
+    protected void shoot(ServerLevel world, LivingEntity shooter, InteractionHand hand, ItemStack stack, List<ItemStack> projectiles, float speed, float divergence, boolean critical, @Nullable LivingEntity target, boolean relative) {
         float f2 = EnchantmentHelper.processProjectileSpread(world, stack, shooter, 0.0F);
         float f3 = projectiles.size() == 1 ? 0.0F : 2.0F * f2 / (float) (projectiles.size() - 1);
         float f4 = (float) ((projectiles.size() - 1) % 2) * f3 / 2.0F;
@@ -56,8 +56,9 @@ public abstract class ProjectileWeaponItem extends Item {
                 f5 = -f5;
                 // CraftBukkit start
                 Projectile iprojectile = this.createProjectile(world, shooter, stack, itemstack1, critical);
-                this.shootProjectile(shooter, iprojectile, i, speed, divergence, f6, target);
 
+                this.shootProjectile(shooter, iprojectile, i, speed, divergence, f6, target, relative);
+                // CraftBukkit start
                 org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(shooter, stack, itemstack1, iprojectile, hand, speed, true);
                 if (event.isCancelled()) {
                     event.getProjectile().remove();
@@ -86,7 +87,7 @@ public abstract class ProjectileWeaponItem extends Item {
         return 1;
     }
 
-    protected abstract void shootProjectile(LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target);
+    protected abstract void shootProjectile(LivingEntity shooter, Projectile projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target, boolean relative);
 
     protected Projectile createProjectile(Level world, LivingEntity shooter, ItemStack weaponStack, ItemStack projectileStack, boolean critical) {
         Item item = projectileStack.getItem();
